/*
 * generated by Xtext 2.14.0
 */
package ut2j.m1ice.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class StateMachineGrammarAccess extends AbstractGrammarElementFinder {
	
	public class StateMachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ut2j.m1ice.StateMachine.StateMachine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStateMachineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cStateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStateStartStateParserRuleCall_2_0 = (RuleCall)cStateAssignment_2.eContents().get(0);
		private final Assignment cStateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStateEndStateParserRuleCall_3_0 = (RuleCall)cStateAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cStateAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cStateStateParserRuleCall_5_0_0 = (RuleCall)cStateAssignment_5_0.eContents().get(0);
		private final Assignment cTransitionAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cTransitionTransitionParserRuleCall_5_1_0 = (RuleCall)cTransitionAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//StateMachine:
		//	'StateMachine'
		//	name=EString
		//	state+=StartState
		//	state+=EndState
		//	'{' (state+=State | transition+=Transition)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'StateMachine' name=EString state+=StartState state+=EndState '{' (state+=State | transition+=Transition)* '}'
		public Group getGroup() { return cGroup; }
		
		//'StateMachine'
		public Keyword getStateMachineKeyword_0() { return cStateMachineKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//state+=StartState
		public Assignment getStateAssignment_2() { return cStateAssignment_2; }
		
		//StartState
		public RuleCall getStateStartStateParserRuleCall_2_0() { return cStateStartStateParserRuleCall_2_0; }
		
		//state+=EndState
		public Assignment getStateAssignment_3() { return cStateAssignment_3; }
		
		//EndState
		public RuleCall getStateEndStateParserRuleCall_3_0() { return cStateEndStateParserRuleCall_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//(state+=State | transition+=Transition)*
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//state+=State
		public Assignment getStateAssignment_5_0() { return cStateAssignment_5_0; }
		
		//State
		public RuleCall getStateStateParserRuleCall_5_0_0() { return cStateStateParserRuleCall_5_0_0; }
		
		//transition+=Transition
		public Assignment getTransitionAssignment_5_1() { return cTransitionAssignment_5_1; }
		
		//Transition
		public RuleCall getTransitionTransitionParserRuleCall_5_1_0() { return cTransitionTransitionParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ut2j.m1ice.StateMachine.State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeEStringParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//State:
		//	'State'
		//	name=EString
		//	type=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//'State' name=EString type=EString
		public Group getGroup() { return cGroup; }
		
		//'State'
		public Keyword getStateKeyword_0() { return cStateKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//type=EString
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//EString
		public RuleCall getTypeEStringParserRuleCall_2_0() { return cTypeEStringParserRuleCall_2_0; }
	}
	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ut2j.m1ice.StateMachine.Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransitionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cSourceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSourceStateCrossReference_2_0 = (CrossReference)cSourceAssignment_2.eContents().get(0);
		private final RuleCall cSourceStateEStringParserRuleCall_2_0_1 = (RuleCall)cSourceStateCrossReference_2_0.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTargetAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTargetStateCrossReference_4_0 = (CrossReference)cTargetAssignment_4.eContents().get(0);
		private final RuleCall cTargetStateEStringParserRuleCall_4_0_1 = (RuleCall)cTargetStateCrossReference_4_0.eContents().get(1);
		
		//Transition:
		//	'Transition' name=EString
		//	source=[State|EString] '=>' target=[State|EString];
		@Override public ParserRule getRule() { return rule; }
		
		//'Transition' name=EString source=[State|EString] '=>' target=[State|EString]
		public Group getGroup() { return cGroup; }
		
		//'Transition'
		public Keyword getTransitionKeyword_0() { return cTransitionKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//source=[State|EString]
		public Assignment getSourceAssignment_2() { return cSourceAssignment_2; }
		
		//[State|EString]
		public CrossReference getSourceStateCrossReference_2_0() { return cSourceStateCrossReference_2_0; }
		
		//EString
		public RuleCall getSourceStateEStringParserRuleCall_2_0_1() { return cSourceStateEStringParserRuleCall_2_0_1; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_3() { return cEqualsSignGreaterThanSignKeyword_3; }
		
		//target=[State|EString]
		public Assignment getTargetAssignment_4() { return cTargetAssignment_4; }
		
		//[State|EString]
		public CrossReference getTargetStateCrossReference_4_0() { return cTargetStateCrossReference_4_0; }
		
		//EString
		public RuleCall getTargetStateEStringParserRuleCall_4_0_1() { return cTargetStateEStringParserRuleCall_4_0_1; }
	}
	public class StartStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ut2j.m1ice.StateMachine.StartState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStartStateAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStartStateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//StartState:
		//	{StartState}
		//	'StartState'
		//	name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{StartState} 'StartState' name=EString
		public Group getGroup() { return cGroup; }
		
		//{StartState}
		public Action getStartStateAction_0() { return cStartStateAction_0; }
		
		//'StartState'
		public Keyword getStartStateKeyword_1() { return cStartStateKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class EndStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ut2j.m1ice.StateMachine.EndState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEndStateAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEndStateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//EndState:
		//	{EndState}
		//	'EndState'
		//	name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{EndState} 'EndState' name=EString
		public Group getGroup() { return cGroup; }
		
		//{EndState}
		public Action getEndStateAction_0() { return cEndStateAction_0; }
		
		//'EndState'
		public Keyword getEndStateKeyword_1() { return cEndStateKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ut2j.m1ice.StateMachine.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	
	
	private final StateMachineElements pStateMachine;
	private final StateElements pState;
	private final TransitionElements pTransition;
	private final StartStateElements pStartState;
	private final EndStateElements pEndState;
	private final EStringElements pEString;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public StateMachineGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pStateMachine = new StateMachineElements();
		this.pState = new StateElements();
		this.pTransition = new TransitionElements();
		this.pStartState = new StartStateElements();
		this.pEndState = new EndStateElements();
		this.pEString = new EStringElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("ut2j.m1ice.StateMachine".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//StateMachine:
	//	'StateMachine'
	//	name=EString
	//	state+=StartState
	//	state+=EndState
	//	'{' (state+=State | transition+=Transition)*
	//	'}';
	public StateMachineElements getStateMachineAccess() {
		return pStateMachine;
	}
	
	public ParserRule getStateMachineRule() {
		return getStateMachineAccess().getRule();
	}
	
	//State:
	//	'State'
	//	name=EString
	//	type=EString;
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//Transition:
	//	'Transition' name=EString
	//	source=[State|EString] '=>' target=[State|EString];
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}
	
	//StartState:
	//	{StartState}
	//	'StartState'
	//	name=EString;
	public StartStateElements getStartStateAccess() {
		return pStartState;
	}
	
	public ParserRule getStartStateRule() {
		return getStartStateAccess().getRule();
	}
	
	//EndState:
	//	{EndState}
	//	'EndState'
	//	name=EString;
	public EndStateElements getEndStateAccess() {
		return pEndState;
	}
	
	public ParserRule getEndStateRule() {
		return getEndStateAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
